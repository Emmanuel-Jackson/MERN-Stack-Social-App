{"ast":null,"code":"import { START_LOADING, END_LOADING, FETCH_SEARCH, FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: {\n        post: data\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: {\n        data\n      }\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["START_LOADING","END_LOADING","FETCH_SEARCH","FETCH_ALL","CREATE","UPDATE","DELETE","api","getPost","id","dispatch","type","data","fetchPost","FETCH_POST","payload","post","error","console","log","getPosts","page","currentPage","numberOfPages","fetchPosts","getPostsBySearch","searchQuery","fetchPostsBySearch","FETCH_BY_SEARCH","createPost","history","push","_id","updatePost","likePost","user","JSON","parse","localStorage","getItem","token","LIKE","deletePost"],"sources":["/home/emjackson/Memories_App/client/src/actions/posts.js"],"sourcesContent":["import { START_LOADING, END_LOADING, FETCH_SEARCH, FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\nimport * as api from '../api/index.js';\nexport const getPost = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n\n    const { data } = await api.fetchPost(id);\n\n    dispatch({ type: FETCH_POST, payload: { post: data } });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPosts = (page) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data: { data, currentPage, numberOfPages } } = await api.fetchPosts(page);\n\n    dispatch({ type: FETCH_ALL, payload: { data, currentPage, numberOfPages } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\n\n    dispatch({ type: FETCH_BY_SEARCH, payload: { data } });\n    dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const createPost = (post, history) => async (dispatch) => {\n  try {\n    dispatch({ type: START_LOADING });\n    const { data } = await api.createPost(post);\n\n    dispatch({ type: CREATE, payload: data });\n\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n  try {\n    const { data } = await api.updatePost(id, post);\n\n    dispatch({ type: UPDATE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const { data } = await api.likePost(id, user?.token);\n\n    dispatch({ type: LIKE, payload: data });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await await api.deletePost(id);\n\n    dispatch({ type: DELETE, payload: id });\n  } catch (error) {\n    console.log(error);\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}